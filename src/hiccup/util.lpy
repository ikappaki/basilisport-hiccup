(ns hiccup.util
  "Utility functions for Hiccup."
  (:require [clojure.string :as str])
  (:import fractions
           urllib.parse))

(def ^:dynamic ^:no-doc *html-mode* :xhtml)

(def ^:dynamic ^:no-doc *escape-strings?* true)

(def ^:dynamic ^:no-doc *base-url* nil)

(def ^:dynamic ^:no-doc *encoding* "UTF-8")

(defmacro with-base-url
  "Sets a base URL that will be prepended onto relative URIs. Note that for this
  to work correctly, it needs to be placed outside the [[hiccup.core/html]] or
  [[hiccup2.core/html]] macros."
  [base-url & body]
  `(binding [*base-url* ~base-url]
     ~@body))

(defprotocol ToString
  (^python/str to-str [x] "Convert a value into a string."))

(extend-protocol ToString
  basilisp.lang.keyword/Keyword
  (to-str [k] (name k))
  fractions/Fraction
  (to-str [r] (str (float r)))
  urllib.parse/ParseResult
  (to-str [u]
    (if (or (.-hostname u)
            (nil? (.-path u))
            (not (-> (.-path u) (.startswith "/"))))
      (str (.geturl u))
      (let [base (str *base-url*)]
        (if (.endswith base "/")
          (str (subs base 0 (dec (count base))) (.geturl u))
          (str base (.geturl u))))))
  python/object
  (to-str [x] (str x))
  nil
  (to-str [_] ""))

(defn ^python/str as-str
  "Converts its arguments into a string using [[to-str]]."
  [& xs]
  (apply str (map to-str xs)))

(defprotocol ToURI
  (^urllib.parse/ParseResult to-uri [x] "Convert a value into a URI."))

(extend-protocol ToURI
  urllib.parse/ParseResult
  (to-uri [u] u)
  python/str
  (to-uri [s] (urllib.parse/urlparse s)))

(deftype RawString [^python/str s]
  (^python/str __str__ [this] s)
  (^python/str __repr__ [this] s)
  (__hash__ [this] (.__hash__ s))
  (^boolean __eq__ [this other]
    (and (instance? RawString other)
         (= s  (str other)))))

(defn raw-string
  "Converts one or more strings into an object that will not be escaped when
  used with the [[hiccup2.core/html]] macro."
  {:arglists '([& xs])}
  ([] (RawString. ""))
  ([x] (RawString. (str x)))
  ([x & xs] (RawString. (apply str x xs))))

(defn raw-string?
  "Returns true if x is a RawString created by [[raw-string]]."
  [x]
  (instance? RawString x))

(defn escape-html
  "Change special characters into HTML character entities."
  [text]
  (.. ^String (to-str text)
    (replace "&"  "&amp;")
    (replace "<"  "&lt;")
    (replace ">"  "&gt;")
    (replace "\"" "&quot;")
    (replace "'" (if (= *html-mode* :sgml) "&#39;" "&apos;"))))

(defmacro with-encoding
  "Sets a default encoding for URL encoding strings. Defaults to UTF-8."
  [encoding & body]
  `(binding [*encoding* ~encoding]
     ~@body))

(defprotocol URLEncode
  (url-encode [x] "Turn a value into a URL-encoded string."))

(extend-protocol URLEncode
  python/str
  (url-encode [s] (urllib.parse/quote-plus (.encode s *encoding*)))
  basilisp.lang.interfaces/IAssociative
  (url-encode [m]
    (str/join "&"
      (for [[k v] m]
        (str (url-encode k) "=" (url-encode v)))))
  python/object
  (url-encode [x] (url-encode (to-str x)))
  nil
  (url-encode [x] ""))

(defn url
  "Creates a URI instance from a variable list of arguments and an optional
  parameter map as the last argument. For example:

      (url \"/group/\" 4 \"/products\" {:page 9})
      => \"/group/4/products?page=9\""
  [& args]
  (let [params (last args), args (butlast args)]
    (to-uri
     (str (apply str args)
          (if (map? params)
            (str "?" (url-encode params))
            params)))))
